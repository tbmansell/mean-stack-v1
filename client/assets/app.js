angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(n){n.$on("login",function(e,t){n.currentUser=t})}]),angular.module("app").controller("LoginCtrl",["$scope","UserService",function(n,o){n.login=function(e,t){o.login(e,t).then(function(e){n.$emit("login",e.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsService",function(n,t){t.fetch().success(function(e){n.posts=e.map(function(e){return{username:e.username,body:e.body,date:new Date(e.date)}})}),n.addPost=function(){var e;n.postBody&&(e={username:n.currentUser.username,body:n.postBody},t.create(e).success(function(e){n.postBody=null}))},n.$on("ws:new_post",function(e,t){n.$apply(function(){t.date=new Date(t.date),n.posts.unshift(t)})})}]),angular.module("app").service("PostsService",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserService",function(n,o){n.register=function(e,t){e&&t?o.create(e,t).then(function(e){console.log("Emit Login: ",e.data),n.$emit("login",e.data)}):alert("Please supply username and password")}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserService",["$http",function(o){var r=this;r.getUser=function(){return o.get("/api/users")},r.login=function(e,t){return o.post("/api/sessions",{username:e,password:t}).then(function(e){return r.token=e.data,o.defaults.headers.common["X-Auth"]=e.data,r.getUser()})},r.create=function(t,n){return o.post("/api/users",{username:t,password:n}).then(function(e){return r.login(t,n)})}}]),angular.module("app").run(["$rootScope",function(n){var e=new WebSocket("ws://localhost:3000");e.onopen=function(){console.log("Websocket connected")},e.onmessage=function(e){console.log("WSS: ",e);var t=JSON.parse(e.data);n.$broadcast("ws:"+t.topic,t.data)}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmNvbnRyb2xsZXIuanMiLCJsb2dpbi5jb250cm9sbGVyLmpzIiwicG9zdHMuY29udHJvbGxlci5qcyIsInBvc3RzLnNlcnZpY2UuanMiLCJyZWdpc3Rlci5jb250cm9sbGVyLmpzIiwicm91dGVzLmpzIiwidXNlci5zZXJ2aWNlLmpzIiwid2Vic29ja2V0cy5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRvbiIsIl8iLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJVc2VyU2VydmljZSIsImxvZ2luIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRoZW4iLCJyZXNwb25zZSIsIiRlbWl0IiwiZGF0YSIsIlBvc3RzU2VydmljZSIsImZldGNoIiwic3VjY2VzcyIsInBvc3RzIiwibWFwIiwicG9zdCIsImJvZHkiLCJkYXRlIiwiRGF0ZSIsImFkZFBvc3QiLCJwb3N0Q29udGVudCIsInBvc3RCb2R5IiwiY3JlYXRlIiwiJGFwcGx5IiwidW5zaGlmdCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbnNvbGUiLCJsb2ciLCJhbGVydCIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwiZ2V0VXNlciIsInZhbCIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwicnVuIiwiJHJvb3RTY29wZSIsImNvbm5lY3Rpb24iLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbm1lc3NhZ2UiLCJlIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsIiRicm9hZGNhc3QiLCJ0b3BpYyJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsTUFBQSxDQUNBLFlDREFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxrQkFBQSxDQUFBLFNBQUEsU0FBQUMsR0FDQUEsRUFBQUMsSUFBQSxRQUFBLFNBQUFDLEVBQUFD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QUF4QyxNQUNBbUMsRUFBQVMsV0FBQSxNQUFBSCxFQUFBSSxNQUFBSixFQUFBekMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgICAnbmdSb3V0ZScsXG5dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKSB7XG4gICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG4gICAgICAgIH0pXG4gICAgfSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIFVzZXJTZXJ2aWNlKXtcbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBVc2VyU2VydmljZS5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBQb3N0c1NlcnZpY2Upe1xuICAgICAgICAvLyBMb2FkIGFsbCBjdXJyZW50IHBvc3RzXG4gICAgICAgIFBvc3RzU2VydmljZS5mZXRjaCgpLnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdHMpIHtcbiAgICAgICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzLm1hcChmdW5jdGlvbihwb3N0KXtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogcG9zdC51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogcG9zdC5ib2R5LFxuICAgICAgICAgICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZShwb3N0LmRhdGUpLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gQWRkIG5ldyBwb3N0XG4gICAgICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc3RDb250ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogJHNjb3BlLmN1cnJlbnRVc2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHksXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgUG9zdHNTZXJ2aWNlLmNyZWF0ZShwb3N0Q29udGVudCkuc3VjY2VzcyhmdW5jdGlvbihwb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIGRvbnQgaGF2ZSB0byBhZGQgdG8gdGhlIGxvY2FsIG1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBhIFdTIGV2ZW50IHdpbGwgdHJpZ2dlciBmb3JtIG91ciBvd24gYWN0aW9uIGFuZCBkbyBpdCAoYmVsb3cpXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTGlzdGVuIG91dCBmb3IgcG9zdCBmcm9tIGFub3RoZXIgY2xpZW50XG4gICAgICAgICRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24oXywgcG9zdCkge1xuICAgICAgICAgICAgLy8gdHJpZ2dlcnMgYW5ndWxhciByZWZyZXNoXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgZGF0ZSB0byBvYmplY3RcbiAgICAgICAgICAgICAgICBwb3N0LmRhdGUgPSBuZXcgRGF0ZShwb3N0LmRhdGUpXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuc2VydmljZSgnUG9zdHNTZXJ2aWNlJywgZnVuY3Rpb24oJGh0dHApIHtcbiAgICAgICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3QpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdClcbiAgICAgICAgfVxuICAgIH0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyU2VydmljZSl7XG4gICAgICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgaWYgKHVzZXJuYW1lICYmIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgVXNlclNlcnZpY2UuY3JlYXRlKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRW1pdCBMb2dpbjogJywgcmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGVydCgnUGxlYXNlIHN1cHBseSB1c2VybmFtZSBhbmQgcGFzc3dvcmQnKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKXtcbiAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgIC53aGVuKCcvJywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCcsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oJy9yZWdpc3RlcicsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvbG9naW4nLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJyxcbiAgICAgICAgICAgIH0pXG4gICAgfSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5zZXJ2aWNlKCdVc2VyU2VydmljZScsIGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICAgIHZhciBzZXJ2aWNlID0gdGhpc1xuXG4gICAgICAgIHNlcnZpY2UuZ2V0VXNlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpXG4gICAgICAgIH1cblxuICAgICAgICBzZXJ2aWNlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgICAgIHNlcnZpY2UudG9rZW4gPSB2YWwuZGF0YVxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuZ2V0VXNlcigpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc2VydmljZS5jcmVhdGUgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHZhbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAucnVuKGZ1bmN0aW9uKCRyb290U2NvcGUpIHtcbiAgICAgICAgdmFyIHVybCA9ICd3czovL2xvY2FsaG9zdDozMDAwJ1xuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQodXJsKVxuXG4gICAgICAgIGNvbm5lY3Rpb24ub25vcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnV2Vic29ja2V0IGNvbm5lY3RlZCcpXG4gICAgICAgIH1cblxuICAgICAgICBjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXU1M6ICcsIGUpXG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UoZS5kYXRhKVxuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCd3czonICsgcGF5bG9hZC50b3BpYywgcGF5bG9hZC5kYXRhKVxuICAgICAgICB9XG4gICAgfSlcbiJdfQ==
