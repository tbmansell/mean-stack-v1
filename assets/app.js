angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(n){n.$on("login",function(e,t){n.currentUser=t})}]),angular.module("app").controller("LoginCtrl",["$scope","UserService",function(n,o){n.login=function(e,t){o.login(e,t).then(function(e){n.$emit("login",e.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsService",function(n,e){e.fetch().success(function(e){n.posts=e}),n.addPost=function(){var t;n.postBody&&(t={username:n.currentUser.username,body:n.postBody},e.create(t).success(function(e){n.posts.unshift(t),n.postBody=null}))}}]),angular.module("app").service("PostsService",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserService",function(n,o){n.register=function(e,t){e&&t?o.create(e,t).then(function(e){console.log("Emit Login: ",e.data),n.$emit("login",e.data)}):alert("Please supply username and password")}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserService",["$http",function(o){var r=this;r.getUser=function(){return o.get("/api/users")},r.login=function(e,t){return console.log("Logging in as:",e,":",t,"..."),o.post("/api/sessions",{username:e,password:t}).then(function(e){return console.log("Logged in as: ",e.data),r.token=e.data,o.defaults.headers.common["X-Auth"]=e.data,r.getUser()})},r.create=function(t,n){return o.post("/api/users",{username:t,password:n}).then(function(e){return console.log("UserService created: ",e),r.login(t,n)})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmNvbnRyb2xsZXIuanMiLCJsb2dpbi5jb250cm9sbGVyLmpzIiwicG9zdHMuY29udHJvbGxlci5qcyIsInBvc3RzLnNlcnZpY2UuanMiLCJyZWdpc3Rlci5jb250cm9sbGVyLmpzIiwicm91dGVzLmpzIiwidXNlci5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsIlVzZXJTZXJ2aWNlIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTZXJ2aWNlIiwiZmV0Y2giLCJzdWNjZXNzIiwicG9zdHMiLCJhZGRQb3N0IiwicG9zdENvbnRlbnQiLCJwb3N0Qm9keSIsImJvZHkiLCJjcmVhdGUiLCJwb3N0IiwidW5zaGlmdCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNvbnNvbGUiLCJsb2ciLCJhbGVydCIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwiZ2V0VXNlciIsInZhbCIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSxNQUFBLENBQ0EsWUNEQUQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLGtCQUFBLENBQUEsU0FBQSxTQUFBQyxHQUNBQSxFQUFBQyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksWUFBQUQsT0NIQU4sUUFBQUMsT0FBQSxPQUNBQyxXQUFBLFlBQUEsQ0FBQSxTQUFBLGNBQUEsU0FBQUMsRUFBQUssR0FDQUwsRUFBQU0sTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBQ0FWLEVBQUFXLE1BQUEsUUFBQUQsRUFBQUUsWUNMQWYsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLFlBQUEsQ0FBQSxTQUFBLGVBQUEsU0FBQUMsRUFBQWEsR0FDQUEsRUFBQUMsUUFBQUMsUUFBQSxTQUFBQyxHQUNBaEIsRUFBQWdCLE1BQUFBLElBR0FoQixFQUFBaUIsUUFBQSxXQUNBLElBQ0FDLEVBREFsQixFQUFBbUIsV0FDQUQsRUFBQSxDQUNBWCxTQUFBUCxFQUFBSSxZQUFBRyxTQUNBYSxLQUFBcEIsRUFBQW1CLFVBR0FOLEVBQUFRLE9BQUFILEdBQUFILFFBQUEsU0FBQU8sR0FDQXRCLEVBQUFnQixNQUFBTyxRQUFBTCxHQUNBbEIsRUFBQW1CLFNBQUEsWUNmQXRCLFFBQUFDLE9BQUEsT0FDQTBCLFFBQUEsZUFBQSxDQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQVosTUFBQSxXQUNBLE9BQUFXLEVBQUFFLElBQUEsZUFHQUQsS0FBQUwsT0FBQSxTQUFBQyxHQUNBLE9BQUFHLEVBQUFILEtBQUEsYUFBQUEsT0NQQXpCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxlQUFBLENBQUEsU0FBQSxjQUFBLFNBQUFDLEVBQUFLLEdBQ0FMLEVBQUE0QixTQUFBLFNBQUFyQixFQUFBQyxHQUNBRCxHQUFBQyxFQUNBSCxFQUFBZ0IsT0FBQWQsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBbUIsUUFBQUMsSUFBQSxlQUFBcEIsRUFBQUUsTUFDQVosRUFBQVcsTUFBQSxRQUFBRCxFQUFBRSxRQUdBbUIsTUFBQSwyQ0NWQWxDLFFBQUFDLE9BQUEsT0FDQWtDLE9BQUEsQ0FBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLElBQUEsQ0FDQW5DLFdBQUEsWUFDQW9DLFlBQUEsZUFFQUQsS0FBQSxZQUFBLENBQ0FuQyxXQUFBLGVBQ0FvQyxZQUFBLGtCQUVBRCxLQUFBLFNBQUEsQ0FDQW5DLFdBQUEsWUFDQW9DLFlBQUEsa0JDYkF0QyxRQUFBQyxPQUFBLE9BQ0EwQixRQUFBLGNBQUEsQ0FBQSxRQUFBLFNBQUFDLEdBQ0EsSUFBQUQsRUFBQUUsS0FFQUYsRUFBQVksUUFBQSxXQUNBLE9BQUFYLEVBQUFFLElBQUEsZUFHQUgsRUFBQWxCLE1BQUEsU0FBQUMsRUFBQUMsR0FFQSxPQURBcUIsUUFBQUMsSUFBQSxpQkFBQXZCLEVBQUEsSUFBQUMsRUFBQSxPQUNBaUIsRUFBQUgsS0FBQSxnQkFBQSxDQUNBZixTQUFBQSxFQUFBQyxTQUFBQSxJQUNBQyxLQUFBLFNBQUE0QixHQUlBLE9BSEFSLFFBQUFDLElBQUEsaUJBQUFPLEVBQUF6QixNQUNBWSxFQUFBYyxNQUFBRCxFQUFBekIsS0FDQWEsRUFBQWMsU0FBQUMsUUFBQUMsT0FBQSxVQUFBSixFQUFBekIsS0FDQVksRUFBQVksYUFJQVosRUFBQUgsT0FBQSxTQUFBZCxFQUFBQyxHQUNBLE9BQUFpQixFQUFBSCxLQUFBLGFBQUEsQ0FDQWYsU0FBQUEsRUFBQUMsU0FBQUEsSUFDQUMsS0FBQSxTQUFBNEIsR0FFQSxPQURBUixRQUFBQyxJQUFBLHdCQUFBTyxHQUNBYixFQUFBbEIsTUFBQUMsRUFBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgICAnbmdSb3V0ZScsXG5dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKSB7XG4gICAgICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG4gICAgICAgIH0pXG4gICAgfSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsIFVzZXJTZXJ2aWNlKXtcbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBVc2VyU2VydmljZS5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBQb3N0c1NlcnZpY2Upe1xuICAgICAgICBQb3N0c1NlcnZpY2UuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3RzKSB7XG4gICAgICAgICAgICAkc2NvcGUucG9zdHMgPSBwb3N0c1xuICAgICAgICB9KVxuXG4gICAgICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc3RDb250ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogJHNjb3BlLmN1cnJlbnRVc2VyLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHksXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgUG9zdHNTZXJ2aWNlLmNyZWF0ZShwb3N0Q29udGVudCkuc3VjY2VzcyhmdW5jdGlvbihwb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3RDb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLnNlcnZpY2UoJ1Bvc3RzU2VydmljZScsIGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbihwb3N0KSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpXG4gICAgICAgIH1cbiAgICB9KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclNlcnZpY2Upe1xuICAgICAgICAkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGlmICh1c2VybmFtZSAmJiBwYXNzd29yZCkge1xuICAgICAgICAgICAgICAgIFVzZXJTZXJ2aWNlLmNyZWF0ZSh1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VtaXQgTG9naW46ICcsIHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoJ1BsZWFzZSBzdXBwbHkgdXNlcm5hbWUgYW5kIHBhc3N3b3JkJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlcil7XG4gICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgICAud2hlbignLycsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUG9zdHNDdHJsJyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC53aGVuKCcvcmVnaXN0ZXInLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbignL2xvZ2luJywge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCcsXG4gICAgICAgICAgICB9KVxuICAgIH0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuc2VydmljZSgnVXNlclNlcnZpY2UnLCBmdW5jdGlvbigkaHR0cCkge1xuICAgICAgICB2YXIgc2VydmljZSA9IHRoaXNcblxuICAgICAgICBzZXJ2aWNlLmdldFVzZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuICAgICAgICB9XG5cbiAgICAgICAgc2VydmljZS5sb2dpbiA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0xvZ2dpbmcgaW4gYXM6JywgdXNlcm5hbWUsICc6JywgcGFzc3dvcmQsICcuLi4nKVxuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24odmFsKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTG9nZ2VkIGluIGFzOiAnLCB2YWwuZGF0YSlcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLnRva2VuID0gdmFsLmRhdGFcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSB2YWwuZGF0YVxuICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLmdldFVzZXIoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHNlcnZpY2UuY3JlYXRlID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbih2YWwpe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyU2VydmljZSBjcmVhdGVkOiAnLCB2YWwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG4iXX0=
