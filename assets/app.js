angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(n){n.$on("login",function(e,t){n.currentUser=t})}]),angular.module("app").controller("LoginCtrl",["$scope","UserService",function(n,o){n.login=function(e,t){o.login(e,t).then(function(e){n.$emit("login",e.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsService",function(t,n){n.fetch().success(function(e){t.posts=e.map(function(e){return{username:e.username,body:e.body,date:new Date(e.date)}}),console.log(t.posts)}),t.addPost=function(){var e;t.postBody&&(e={username:t.currentUser.username,body:t.postBody},n.create(e).success(function(e){e.date=new Date,t.posts.unshift(e),t.postBody=null}))}}]),angular.module("app").service("PostsService",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserService",function(n,o){n.register=function(e,t){e&&t?o.create(e,t).then(function(e){console.log("Emit Login: ",e.data),n.$emit("login",e.data)}):alert("Please supply username and password")}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserService",["$http",function(o){var r=this;r.getUser=function(){return o.get("/api/users")},r.login=function(e,t){return console.log("Logging in as:",e,":",t,"..."),o.post("/api/sessions",{username:e,password:t}).then(function(e){return console.log("Logged in as: ",e.data),r.token=e.data,o.defaults.headers.common["X-Auth"]=e.data,r.getUser()})},r.create=function(t,n){return o.post("/api/users",{username:t,password:n}).then(function(e){return console.log("UserService created: ",e),r.login(t,n)})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
